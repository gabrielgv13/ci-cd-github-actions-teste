name: Gerar Changelog do README

on:
  push:
    paths:
      - 'README.md'
    branches: [ main, master ]

jobs:
  generate-changelog:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout do código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configurar Git
      run: |
        git config --local user.name "github-actions[bot]"
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

    - name: Verificar se existe changelog
      id: check_changelog
      run: |
        if [ -f "CHANGELOG.md" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          # Obter última versão do changelog existente
          CURRENT_VERSION=$(grep -E '^## \[[0-9]+\.[0-9]+\]' CHANGELOG.md | head -1 | sed -E 's/^## \[([0-9]+\.[0-9]+)\].*/\1/' || echo "")
          if [ -n "$CURRENT_VERSION" ]; then
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Calcular nova versão
      id: new_version
      run: |
        if [ "${{ steps.check_changelog.outputs.exists }}" = "true" ] && [ -n "${{ steps.check_changelog.outputs.version }}" ]; then
          OLD_VERSION="${{ steps.check_changelog.outputs.version }}"
          MAJOR=$(echo $OLD_VERSION | cut -d. -f1)
          MINOR=$(echo $OLD_VERSION | cut -d. -f2)
          NEW_MINOR=$((MINOR + 1))
          echo "version=${MAJOR}.${NEW_MINOR}" >> $GITHUB_OUTPUT
        else
          echo "version=1.0" >> $GITHUB_OUTPUT
        fi

    - name: Obter mudanças do README
      id: get_changes
      run: |
        # Obtém os últimos 2 commits para comparar
        git fetch --depth=2
        CURRENT_COMMIT="${{ github.sha }}"
        PREVIOUS_COMMIT=$(git log --format=%H -n 2 | tail -1)
        
        echo "Current: $CURRENT_COMMIT"
        echo "Previous: $PREVIOUS_COMMIT"
        
        if [ "$CURRENT_COMMIT" = "$PREVIOUS_COMMIT" ] || [ -z "$PREVIOUS_COMMIT" ]; then
          echo "changes=- Versão inicial do README.md" >> $GITHUB_OUTPUT
        else
          # Obtém diff apenas do README.md
          if git diff $PREVIOUS_COMMIT $CURRENT_COMMIT --name-only | grep -q "README.md"; then
            CHANGES=$(git diff $PREVIOUS_COMMIT $CURRENT_COMMIT -- README.md | \
              grep '^+' | grep -v '^+++' | \
              sed 's/^+//' | \
              head -10 | \
              sed 's/^/- /')
            
            if [ -z "$CHANGES" ]; then
              echo "changes=- Atualizações gerais no README.md" >> $GITHUB_OUTPUT
            else
              # Escapa para output
              CHANGES="${CHANGES//'%'/'%25'}"
              CHANGES="${CHANGES//$'\n'/'%0A'}"
              echo "changes=$CHANGES" >> $GITHUB_OUTPUT
            fi
          else
            echo "changes=- Atualizações no README.md" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Gerar CHANGELOG
      run: |
        VERSION="${{ steps.new_version.outputs.version }}"
        DATE=$(date +'%Y-%m-%d')
        
        # Decodifica as mudanças
        CHANGES="${{ steps.get_changes.outputs.changes }}"
        CHANGES="${CHANGES//'%0A'/$'\n'}"
        CHANGES="${CHANGES//'%25'/'%'}"
        
        if [ "${{ steps.check_changelog.outputs.exists }}" = "false" ]; then
          cat > CHANGELOG.md << EOF
# Changelog

Todas as mudanças notáveis neste projeto serão documentadas neste arquivo.

## [$VERSION] - $DATE

$CHANGES

EOF
        else
          # Cria um arquivo temporário com o novo conteúdo no topo
          cat > CHANGELOG_new.md << EOF
# Changelog

Todas as mudanças notáveis neste projeto serão documentadas neste arquivo.

## [$VERSION] - $DATE

$CHANGES

EOF
          # Adiciona o conteúdo antigo (pula o header)
          tail -n +4 CHANGELOG.md >> CHANGELOG_new.md
          mv CHANGELOG_new.md CHANGELOG.md
        fi
        
        echo "CHANGELOG.md atualizado para versão $VERSION"
        cat CHANGELOG.md

    - name: Fazer commit das mudanças
      run: |
        git add CHANGELOG.md
        
        if git diff --staged --quiet; then
          echo "Nenhuma mudança para commitar"
          exit 0
        fi
        
        git commit -m "docs: atualiza CHANGELOG para versão ${{ steps.new_version.outputs.version }}"
        git push
