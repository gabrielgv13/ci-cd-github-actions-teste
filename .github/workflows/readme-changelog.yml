name: Gerar Changelog do README

on:
  push:
    paths:
      - 'README.md'
    branches: [ main, master ]

jobs:
  generate-changelog:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout do código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Configurar Git
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"

    - name: Verificar se existe changelog
      id: check_changelog
      run: |
        if [ -f "CHANGELOG.md" ]; then
          echo "changelog_exists=true" >> $GITHUB_OUTPUT
        else
          echo "changelog_exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Obter versão atual
      id: get_version
      run: |
        if [ "${{ steps.check_changelog.outputs.changelog_exists }}" = "true" ]; then
          CURRENT_VERSION=$(grep -oP '^## \Kv?\d+\.\d+' CHANGELOG.md | head -1 || echo "")
          if [ -z "$CURRENT_VERSION" ]; then
            echo "version=1.0" >> $GITHUB_OUTPUT
          else
            # Incrementa a versão minor
            MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1 | sed 's/v//')
            MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)
            NEW_MINOR=$((MINOR + 1))
            echo "version=${MAJOR}.${NEW_MINOR}" >> $GITHUB_OUTPUT
          fi
        else
          echo "version=1.0" >> $GITHUB_OUTPUT
        fi

    - name: Obter mudanças do README
      id: get_changes
      run: |
        # Obtém o commit atual e anterior
        CURRENT_COMMIT=${{ github.sha }}
        PREVIOUS_COMMIT=$(git log --oneline -n 2 --format=%H | tail -1)
        
        if [ "$CURRENT_COMMIT" = "$PREVIOUS_COMMIT" ]; then
          CHANGES="- Versão inicial do README.md"
        else
          CHANGES=$(git diff $PREVIOUS_COMMIT $CURRENT_COMMIT -- README.md | grep '^+' | grep -v '^+++' | sed 's/^+//' | head -5)
          if [ -z "$CHANGES" ]; then
            CHANGES="- Atualizações no README.md"
          else
            # Formata as mudanças
            CHANGES=$(echo "$CHANGES" | sed 's/^/- /' | head -5)
          fi
        fi
        
        # Escapa multiline para output
        CHANGES="${CHANGES//'%'/'%25'}"
        CHANGES="${CHANGES//$'\n'/'%0A'}"
        CHANGES="${CHANGES//$'\r'/'%0D'}"
        echo "changes=$CHANGES" >> $GITHUB_OUTPUT

    - name: Gerar ou atualizar CHANGELOG
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        CHANGES="${{ steps.get_changes.outputs.changes }}"
        DATE=$(date +'%Y-%m-%d')
        
        # Decodifica as mudanças
        CHANGES="${CHANGES//'%0A'/$'\n'}"
        CHANGES="${CHANGES//'%0D'/$'\r'}"
        CHANGES="${CHANGES//'%25'/'%'}"
        
        if [ "${{ steps.check_changelog.outputs.changelog_exists }}" = "false" ]; then
          # Cria novo changelog
          cat > CHANGELOG.md << EOF
# Changelog

Todas as mudanças notáveis neste projeto serão documentadas neste arquivo.

## [$VERSION] - $DATE

$CHANGES

EOF
        else
          # Atualiza changelog existente
          HEADER="# Changelog

Todas as mudanças notáveis neste projeto serão documentadas neste arquivo.

## [$VERSION] - $DATE

$CHANGES"

          echo "$HEADER" > temp_changelog.md
          sed -n '3,$p' CHANGELOG.md >> temp_changelog.md
          mv temp_changelog.md CHANGELOG.md
        fi

    - name: Commit e push do CHANGELOG
      run: |
        git add CHANGELOG.md
        if ! git diff --staged --quiet; then
          git commit -m "docs: atualiza CHANGELOG para versão ${{ steps.get_version.outputs.version }}"
          git push
        else
          echo "Nenhuma mudança para commitar"
        fi
